// Generated by CoffeeScript 1.3.3
(function() {
  var EventModel, EventSchema, GCMIDs, app, consolidate, dateFormat, db, express, gcm, mongoose, populateEvents, sender;

  express = require('express');

  mongoose = require('mongoose');

  consolidate = require('consolidate');

  gcm = require('node-gcm');

  dateFormat = require('dateformat');

  dateFormat.i18n.monthNames = ["Jan.", "Feb.", "Marts", "April", "Maj", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dec."];

  app = express();

  app.use(express.compress());

  app.use(express["static"]("" + __dirname + "/resources/public"));

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(app.router);

  app.configure('development', function() {
    app.use(express.logger(':method :url'));
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });

  app.configure('production', function() {
    return app.use(express.errorHandler());
  });

  app.engine('html', consolidate.hogan);

  app.set('view engine', 'html');

  app.set('views', "" + __dirname + "/application/templates");

  db = mongoose.connect(require('./database'));

  EventSchema = mongoose.Schema({
    title: String,
    description: String,
    eventTime: Date,
    geoLocation: [Number],
    range: Number,
    humanLocation: String
  });

  EventModel = db.model('events', EventSchema);

  sender = new gcm.Sender(require('./gcmKey'));

  GCMIDs = [];

  populateEvents = function(req, res, next) {
    return EventModel.find({}, function(err, evs) {
      var ev, i;
      res.locals.events = (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = evs.length; _i < _len; i = ++_i) {
          ev = evs[i];
          _results.push({
            index: i,
            title: ev.title,
            description: ev.description,
            eventTime: dateFormat(ev.eventTime, 'hh:mm, d mmm yyyy'),
            geoLocation: ev.geoLocation,
            humanLocation: ev.humanLocation
          });
        }
        return _results;
      })();
      res.locals.json = JSON.stringify(res.locals.events);
      return next();
    });
  };

  app.get('/events/list', populateEvents, function(req, res) {
    return res.render('index');
  });

  app.get('/events/new', populateEvents, function(req, res) {
    res.locals.method = 'put';
    return res.render('form');
  });

  app.put('/events/save', function(req, res) {
    return (new EventModel(req.body)).save(function(err) {
      var message;
      message = new gcm.Message();
      message.addData('range', req.body.range);
      message.addData('geoLocation', req.body.geoLocation);
      return sender.send(message, GCMIDs, 4, function(result) {
        return res.redirect('/events/new');
      });
    });
  });

  app.get('/gcm/register/:regid', function(req, res) {
    GCMIDs.push(req.params.regid);
    return res.send(200, '');
  });

  app.get('/gcm/debug', function(req, res) {
    return res.send(GCMIDs);
  });

  app.get('/events/send', function(req, res) {
    var message;
    message = new gcm.Message();
    message.addData('range', 30);
    message.addData('geoLocation', [30, 20]);
    message.delayWhileIdle = true;
    return sender.send(message, GCMIDs, 4, function(result) {
      console.log(result);
      return res.end();
    });
  });

  app.listen(8080);

}).call(this);
