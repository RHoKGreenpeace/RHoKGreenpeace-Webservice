// Generated by CoffeeScript 1.3.3
(function() {
  var Hogan, TemplateEngine, TimedHashTable, fs, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  _ = require('underscore');

  TimedHashTable = require('./datastructures/TimedHashTable');

  Hogan = require('hogan.js');

  TemplateEngine = (function() {

    function TemplateEngine() {
      this.__express = __bind(this.__express, this);

    }

    TemplateEngine.prototype.render = function(path, context) {
      var options, template, templateName;
      templateName = this.getTemplateName(path, context.settings);
      template = this.getTemplate(templateName, context.settings);
      options = this.getPartials(template, context.settings);
      return template.render(context, options);
    };

    TemplateEngine.prototype.getTemplate = function(templateName, settings) {
      var _ref;
      if (settings['view cache']) {
        return (_ref = this.cache.get(templateName)) != null ? _ref : this.loadTemplateFromFile(templateName, settings);
      }
      return this.loadTemplateFromFile(templateName, settings);
    };

    TemplateEngine.prototype.getPartials = function(template, settings) {
      var partials, partialsNames, path, reducer, tree, _i, _len;
      tree = Hogan.parse(Hogan.scan(template.text));
      reducer = function(memo, elm, list) {
        if (elm.nodes != null) {
          memo.push(_.reduce(elm.nodes, reducer, []));
        }
        if ((elm.tag != null) && elm.tag === '>') {
          return memo.concat(elm.n);
        }
        return memo;
      };
      partialsNames = _.chain(tree).reduce(reducer, []).flatten().unique().value();
      partials = {};
      for (_i = 0, _len = partialsNames.length; _i < _len; _i++) {
        path = partialsNames[_i];
        partials[path] = this.getTemplate(path, settings).text;
      }
      return partials;
    };

    TemplateEngine.prototype.getTemplateName = function(templatePath, settings) {
      return templatePath.substr(settings['views'].replace(/\/$/, '').length).replace(/(\.[^.]+)$/, '');
    };

    TemplateEngine.prototype.loadTemplateFromFile = function(templateName, settings) {
      var template;
      template = Hogan.compile(fs.readFileSync(this.resolvePath(templateName, settings), 'utf8'));
      this.cache.set(templateName, template);
      return template;
    };

    TemplateEngine.prototype.resolvePath = function(templateName, settings) {
      var basePath, ext;
      basePath = settings['views'].replace(/\/$/, '') + "/";
      ext = '.' + settings['view engine'].replace(/^\./, '');
      return basePath + templateName + ext;
    };

    TemplateEngine.prototype.__express = function(path, context, fn) {
      var _ref;
      try {
        if (!(this.cache != null)) {
          this.cache = new TimedHashTable((_ref = context.settings['view cache lifetime']) != null ? _ref : 1000 * 60 * 60 * 24 * 7);
        }
        return fn(null, this.render(path, context));
      } catch (e) {
        return fn(e);
      }
    };

    return TemplateEngine;

  })();

  module.exports = TemplateEngine;

}).call(this);
