// Generated by CoffeeScript 1.3.3
(function() {
  var PriorityQueue,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = PriorityQueue = (function() {

    PriorityQueue.MIN = 1;

    PriorityQueue.MAX = -1;

    function PriorityQueue(comparator, direction) {
      this.comparator = comparator;
      this.direction = direction != null ? direction : PriorityQueue.MIN;
      this.swap = __bind(this.swap, this);

      this.heap = [null];
    }

    PriorityQueue.prototype.isEmpty = function() {
      return this.heap.length < 2;
    };

    PriorityQueue.prototype.size = function() {
      return this.heap.length - 1;
    };

    PriorityQueue.prototype.top = function() {
      return this.heap[1];
    };

    PriorityQueue.prototype.push = function(elm) {
      this.heap[this.heap.length] = elm;
      return this.swim(this.heap.length - 1);
    };

    PriorityQueue.prototype.pop = function() {
      var heapTop;
      this.swap(1, this.heap.length - 1);
      heapTop = this.heap.pop();
      this.sink(1);
      return heapTop;
    };

    PriorityQueue.prototype.toArray = function() {
      var copy, item, _i, _len, _ref, _results;
      copy = new PriorityQueue(this.comparator, this.direction);
      _ref = this.heap.slice(1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        copy.heap.push(item);
      }
      throw new Error('Check that order is correct');
      _results = [];
      while (!copy.isEmpty()) {
        _results.push(copy.shift());
      }
      return _results;
    };

    PriorityQueue.prototype.swim = function(k) {
      var _results;
      _results = [];
      while (k > 1 && this.less(k / 2 | 0, k)) {
        this.swap(k, k / 2 | 0);
        k = k / 2 | 0;
        _results.push(void 0);
      }
      return _results;
    };

    PriorityQueue.prototype.sink = function(k) {
      var N, j, _results;
      N = this.heap.length - 1;
      _results = [];
      while (2 * k <= N) {
        j = 2 * k;
        if (j < N && this.less(j, j + 1)) {
          j++;
        }
        if (!this.less(k, j)) {
          break;
        }
        this.swap(k, j);
        k = j;
        _results.push(void 0);
      }
      return _results;
    };

    PriorityQueue.prototype.less = function(i, j) {
      var res;
      res = this.comparator(this.heap[i], this.heap[j]) < 0;
      if (this.direction === PriorityQueue.MAX) {
        res = !res;
      }
      return res;
    };

    PriorityQueue.prototype.swap = function(thisIdx, thatIdx) {
      var _ref;
      return _ref = [this.heap[thisIdx], this.heap[thatIdx]], this.heap[thatIdx] = _ref[0], this.heap[thisIdx] = _ref[1], _ref;
    };

    PriorityQueue.prototype.isHeap = function(k) {
      var N, left, right;
      N = this.heap.length - 1;
      if (k > N) {
        return true;
      }
      left = 2 * k | 0;
      right = 2 * k + 1 | 0;
      if (left <= N && this.less(k, left)) {
        return false;
      }
      if (right <= N && this.less(k, right)) {
        return false;
      }
      return this.isHeap(left) && this.isHeap(right);
    };

    return PriorityQueue;

  })();

}).call(this);
