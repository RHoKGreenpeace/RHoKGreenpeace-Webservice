// Generated by CoffeeScript 1.3.3
(function() {
  var TimedHashTable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = TimedHashTable = (function() {

    TimedHashTable.prototype.table = {};

    TimedHashTable.prototype.timers = {};

    TimedHashTable.prototype.size = 0;

    function TimedHashTable(defaultTimeout) {
      this.defaultTimeout = defaultTimeout;
      this.remove = __bind(this.remove, this);

    }

    TimedHashTable.prototype.get = function(hash) {
      return this.table[hash];
    };

    TimedHashTable.prototype.set = function(hash, value, timeout) {
      if (timeout == null) {
        timeout = this.defaultTimeout;
      }
      if (!this.contains(hash)) {
        ++this.size;
      } else {
        clearTimeout(this.timers[hash]);
      }
      this.table[hash] = value;
      this.timers[hash] = setTimeout(this.remove, timeout, hash);
      return this;
    };

    TimedHashTable.prototype.contains = function(hash) {
      return this.table[hash] != null;
    };

    TimedHashTable.prototype.size = function() {
      return this.size;
    };

    TimedHashTable.prototype.remove = function(hash) {
      if (this.contains(hash)) {
        clearTimeout(this.timers[hash]);
        delete this.table[hash];
        delete this.timers[hash];
        --this.size;
      }
      return this;
    };

    TimedHashTable.prototype.purge = function() {
      var timer;
      for (timer in this.timers) {
        clearTimeout(timer);
      }
      delete this.table;
      delete this.timers;
      delete this.size;
      this.table = {};
      this.timers = {};
      this.size = 0;
      return this;
    };

    return TimedHashTable;

  })();

}).call(this);
